# -*- coding: utf-8 -*-
"""
Created on Tue Jan 24 15:38:50 2017

@author: Louis
"""


import os
from sklearn.neighbors import KernelDensity
import csv

#import urlib #can't find it !!
import json, requests
import random
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets.base import Bunch


def demandRetriever():
    """
    @input: day of the week for which we want to know the demand pattern
        
    
    Days to examine:
        cleaned01-Dec-2015
        cleaned02-Dec-2015
        cleaned03-Dec-2015
        cleaned04-Dec-2015
        cleaned07-Dec-2015
        cleaned08-Dec-2015
        cleaned09-Dec-2015
        cleaned10-Dec-2015
        cleaned11-Dec-2015
        cleaned14-Dec-2015
        cleaned15-Dec-2015
        cleaned16-Dec-2015
        cleaned17-Dec-2015
        cleaned18-Dec-2015
        cleaned21-Dec-2015
    
    @output:  measures: array [n_samples, n_features]
                        
                        Features are: day (int from 1 to 5, no week-end)
                            Longitude   (float) 
                            Latitude  (float)
                            ReadyTime (int)
                            CloseTime  (int)
                            
                    
    The delimiter in the csv file is set to ','
    The input csv file must have a column called 'Address' and 'FedEx ID'
    """
    
    #Strings to load data
    stringFile='/Users/Louis/Documents/Research/Code/cleanedData/'
    days={'cleaned01-Dec-2015':2,#tuesday
        'cleaned02-Dec-2015':3,#wednesday
        'cleaned03-Dec-2015':4,#...
        'cleaned04-Dec-2015':5,
        'cleaned07-Dec-2015':1,
        'cleaned08-Dec-2015':2,
        'cleaned09-Dec-2015':3,
        'cleaned10-Dec-2015':4,
        'cleaned11-Dec-2015':5,
        'cleaned14-Dec-2015':1,
        'cleaned15-Dec-2015':2,
        'cleaned16-Dec-2015':3,
        'cleaned17-Dec-2015':4,
        'cleaned18-Dec-2015':5,
        'cleaned21-Dec-2015':1}
        
    #Store results
    measures=[]
     
    for day in days.keys():
        #Configuration for CSV reading
        with open(stringFile+day+'_modified.csv') as csvfile:
            #Dictionary containing the info
            reader=csv.DictReader(csvfile,delimiter=',')
            #print(day)
            
            for row in reader:
                if row['ReadyTimePickup']!='N/A' and row['Longitude']!='N/A':#pick-up
                    measures.append([days[day],float(row['Longitude']),float(row['Latitude']),
                                     int(row['ReadyTimePickup']),int(row['CloseTimePickup'])])
            
    measures=np.asarray(measures)
                
    return measures
    
measures=demandRetriever()
print(measures.shape)



# Let's create a Kernel Density Estimation for one specific day, at one time
#Monday, between 1000 and 1030
mask=(measures[:,0]==1) & (measures[:,3]>1000) & (measures[:,3]<1030)
print(measures[mask].shape)

#Corresponding KernelDensity model: Parameters to be reviewed !!
kde = KernelDensity(bandwidth=0.04,
                        kernel='gaussian', algorithm='ball_tree')
kde.fit(measures[mask][:,1:3])#remov

print('Sample generated by our model: ')
print(kde.sample(3))

 # Function to rename headers of our .csv.......   
def csvHeader():

    for inputFileName in days.keys():
        outputFileName = '/Users/Louis/Documents/Research/Code/cleanedData/'+inputFileName + "_modified.csv"
        inputFileName='/Users/Louis/Documents/Research/Code/cleanedData/'+inputFileName+'.csv'
        with open(inputFileName, newline='') as inFile, open(outputFileName, 'w', newline='') as outfile:
            r = csv.reader(inFile)
            w = csv.writer(outfile)

            next(r, None)  # skip the first row from the reader, the old header
            # write new header
            w.writerow(['StopDate','StopOrder','StopStartTime','Address','PostalCode','CourierSuppliedAddress','ReadyTimePickup','CloseTimePickup','PickupType','WrongDayLateCount','RightDayLateCount','FedExID','Longitude','Latitude'])

            # copy the rest
            for row in r:
                w.writerow(row)
                
